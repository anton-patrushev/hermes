/*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/* @generated DO NOT EDIT */
/* automatically generated by rust-bindgen 0.59.1 */

use libc::size_t;

#[repr(C)]
pub struct HermesDataRef {
    pub data: *const ::std::os::raw::c_void,
    pub length: size_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HermesSourceMapLocation {
    #[doc = " Index of the path."]
    pub path_index: u32,
    #[doc = " 1-based."]
    pub line: u32,
    #[doc = " 1-based."]
    pub column: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HermesSourceMap {
    _unused: [u8; 0],
}
extern "C" {
    #[doc = " \\return the created map, which is always non-null."]
    pub fn hermes_source_map_parse(
        source: *const ::std::os::raw::c_char,
        len: size_t,
    ) -> *mut HermesSourceMap;
}
extern "C" {
    #[doc = " \\p map can be null (but it should never happen)."]
    pub fn hermes_source_map_free(map: *mut HermesSourceMap);
}
extern "C" {
    #[doc = " \\p map is the created map. It should never be null, but in case it is (stuff"]
    #[doc = "     happens), an \"internal error\" message is returned."]
    #[doc = " \\return the error during map parsing or null if there is no error."]
    pub fn hermes_source_map_get_error(map: *const HermesSourceMap) -> HermesDataRef;
}
extern "C" {
    #[doc = " \\return how many different paths are encoded in the source map."]
    pub fn hermes_source_map_get_num_paths(map: *const HermesSourceMap) -> u32;
}
extern "C" {
    #[doc = " \\return a reference to the full source path with index \\p index."]
    #[doc = "     The reference is valid until the call to the source map API."]
    pub fn hermes_source_map_get_full_path(map: *mut HermesSourceMap, index: u32) -> HermesDataRef;
}
extern "C" {
    #[doc = " \\p line and \\p column are 1-based."]
    #[doc = " \\return null if the location could not be found, or a pointer to the found"]
    #[doc = "     location. The pointer is valid only until any other call to the map."]
    pub fn hermes_source_map_get_location(
        map: *mut HermesSourceMap,
        line: u32,
        column: u32,
    ) -> *mut HermesSourceMapLocation;
}
